#!/bin/bash

conoha_list()
{
   res=$(curl -sS -X GET \
        -H "Accept: application/json" \
        -H "X-Auth-Token: $USER_TOKEN" \
        https://compute.tyo1.conoha.io/v2/$TENANT_ID/servers/detail)

    if [[ $res == "Authentication required" ]]; then
        echo $res
        exit 1
    fi

    server_count=$(echo $res | jq ".servers | length")
    if [[ $server_count == 0 ]]; then
        echo "no servers"
        exit 0
    fi

    (
    echo -e "NO\tSTATUS\tINSTANCE_NAME_TAG\tIP_ADDRESS\tCREATED"
    echo $res | jq -r ".servers | keys[] as \$k | [\$k, .[\$k].status, .[\$k].metadata.instance_name_tag, if .[\$k].addresses=={} then \" \" elif .[\$k].addresses[][0].version==4 then .[\$k].addresses[][0].addr else .[\$k].addresses[][1].addr end, .[\$k].created] | @tsv"
    ) | column -t -s "$(printf '\t')"
}

conoha_up()
{
    if [[ ! -f $SERVER_FILE ]]; then
        echo server file not exists
        exit 1
    fi

    local tmp=$(curl -X POST \
        -H "Accept: application/json" \
        -H "X-Auth-Token: $USER_TOKEN" \
        -d @$SERVER_FILE \
        https://compute.tyo1.conoha.io/v2/$TENANT_ID/servers -w '\n%{http_code}' -s)

    local res=$(echo "$tmp" | sed '$d')
    local res_code=$(echo "$tmp" | tail -n 1)

    if [[ $res_code == "202" ]]; then
        echo up Complete
    else
        echo up failure
        echo http_code: $res_code
        echo $res
    fi
}

conoha_rm()
{
    conoha_list
    read_no 'rm No' $server_count

    local server_id=$(echo $res | jq -r ".servers | .[$no].id")
    local tag=$(echo $res | jq -r ".servers[$no].metadata.instance_name_tag")
    printf "\nrm instance_name_tag: %s\n" $tag

    if [[ $server_id == 'null' ]]; then
        echo null
        exit 0
    fi

    res_rm_http_code=$(curl -sS -w '%{http_code}\n' -X DELETE \
        -H "Accept: application/json" \
        -H "X-Auth-Token: $USER_TOKEN" \
        https://compute.tyo1.conoha.io/v2/$TENANT_ID/servers/$server_id -o /dev/null)

    if [[ $res_rm_http_code == "204" ]]; then
        echo rm Complete
    else
        echo rm failure
    fi

}

conoha_ssh()
{
    conoha_list
    read_no 'ssh No' $server_count

    ip_address=$(echo $res | jq -r "if .servers[$no].addresses[][0].version==4 then .servers[$no].addresses[][0].addr else .servers[$no].addresses[][1].addr end")
    echo $ip_address
    ssh -i $SSH_PRIVATE_KEY root@$ip_address
}
    
    
